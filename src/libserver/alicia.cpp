#include <bit>
#include <iostream>

#include "libserver/alicia.hpp"
#include "libserver/mapping.hpp"

namespace
{

} // namespace anon

void send_command(boost::asio::ip::tcp::socket& socket, alicia::ICommand& cmd)
{
  printf(">>> SEND ");
  cmd.Log();

  std::vector<uint8_t> cmdContents = cmd.AsBytes();
  // gametree forgot to encode clientbound packets
  //alicia::xor_codec_cpp(cmdContents);
  std::vector<uint8_t> buf(sizeof(uint32_t));
  uint16_t totalPacketSize = sizeof(uint32_t) + cmdContents.size();
  uint32_t responseEncodedMagic = alicia::encode_message_magic({cmd.GetCommandId(), totalPacketSize});
  *reinterpret_cast<uint32_t*>(buf.data()) = responseEncodedMagic;
  buf.insert(buf.end(), cmdContents.begin(), cmdContents.end());
  socket.write_some(boost::asio::const_buffer(buf.data(), totalPacketSize));
}

alicia::MessageMagic alicia::decode_message_magic(
  uint32_t value)
{
  MessageMagic magic;
  if (value & 1 << 15) {
    const uint16_t section = value & 0x3FFF;
    magic.length = (value & 0xFF) << 4 | section >> 8 & 0xF | section & 0xF000;
  }

  const uint16_t firstTwoBytes = value & 0xFFFF;
  const uint16_t secondTwoBytes = value >> 16 & 0xFFFF;
  const uint16_t xorResult = firstTwoBytes ^ secondTwoBytes;
  magic.id = ~(xorResult & 0xC000) & xorResult;

  return magic;
}

uint32_t alicia::encode_message_magic(
  MessageMagic magic)
{
  const uint16_t id = BufferJumbo & 0xFFFF | magic.id & 0xFFFF;
  const uint32_t length = BufferSize << 16 | magic.length;

  uint32_t encoded = length;
  encoded = (encoded & 0x3FFF | encoded << 14) & 0xFFFF;
  encoded = ((encoded & 0xF | 0xFF80) << 8 | length >> 4 & 0xFF | encoded & 0xF000) & 0xFFFF;
  encoded |= (encoded ^ id) << 16;
  return encoded;
}

void alicia::read(std::istream& stream, std::string& val)
{
  while(true) {
    char v{0};
    stream.read(&v, sizeof(v));
    if(v == 0)
      break;
    val += v;
  }
}

uint16_t alicia::DummyCommand::GetCommandId()
{
  return commandId;
}

std::vector<uint8_t>& alicia::DummyCommand::AsBytes()
{
  return data;
}

void alicia::DummyCommand::Log()
{
  std::string_view commandName = GetMessageName(commandId);
  std::cout << commandName << " (0x" << std::hex << commandId << ")" << std::dec << " @ " << timestamp << ":" ;
  
  char rowString[17];
  memset(rowString, 0, 17);

  int column = 0;
  for (int i = 0; i < data.size(); ++i) {
    column = i%16;
    switch(column)
    {
      case 0:
        printf("\t%s\n\t", rowString);
        memset(rowString, 0, 17);
        break;
      case 8:
        printf(" ");
        break;
    }

    uint8_t datum = data[i];
    if(datum >= 32 && datum <= 126) {
      rowString[column] = (char)datum;
    } else {
      rowString[column] = '.';
    }

    printf(" %02X", datum);
  }
  printf("%*s\t%s\n\n", (16-column)*3, "", rowString);
}

void alicia::Client::read_loop()
{
  _socket.async_read_some(_buffer.prepare(4096), [&](boost::system::error_code error, std::size_t size) {
    if(error) {
      printf(
          "Error occurred on read loop with client on port %d. What: %s\n",
          _socket.remote_endpoint().port(),
          error.message().c_str());
      return;
    }

    // Commit the recieved buffer.
    _buffer.commit(size);

    std::istream stream(&_buffer);

    // Read the message magic.
    uint32_t magic = 0;
    read(stream, magic);
    if(magic == 0x0) {
      throw std::runtime_error("invalid message magic");
    }

    const auto message_magic = decode_message_magic(magic);

    // Read the message data.
    std::vector<uint8_t> data;
    data.resize(message_magic.length - 4);
    read(stream, data);

    // XOR decode
    xor_codec_cpp(data);

    DummyCommand request = DummyCommand(message_magic.id);
    request.timestamp = std::chrono::system_clock::now();
    request.data = data;
    printf("<<< RECV ");
    request.Log();

    switch(message_magic.id)
    {
      // AcCmdCLLogin
      case 0x7:
        {
          DummyCommand response(0x8);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              0xC2, 0x8,  0x40, 0xA7, 0xF2, 0xB7, 0xDA, 0x1,  0x94, 0xA7, 0xC,  0x0,  
              0xE8, 0xE2, 0x6,  0x0,  // character id?
              0x72, 0x67,
              0x6E, 0x74, 0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0xA,  0x0,  0xB1, 0x8D, 0x0,  0x0,  0x30, 0x61, 0x0,  0x0,
              0x0,  0x0,  0x0,  0x0,  0x0,  0x19, 0x0,  0x0,  0x0,  0xC,  0x1,  0x0,  0x16, 0x57, 0x2,  0x0,  0x15, 0x41,
              0x3,  0x0,  0x17, 0x44, 0x4,  0x0,  0x18, 0x53, 0x5,  0x0,  0x12, 0x13, 0x6,  0x0,  0x82, 0x83, 0x7,  0x0,
              0x20, 0x2F, 0x8,  0x0,  0x46, 0x0,  0x9,  0x0,  0x52, 0x0,  0xA,  0x0,  0x19, 0x0,  0xB,  0x0,  0xF,  0x0,
              0xC,  0x0,  0x43, 0x0,  0x2F, 0x77, 0x69, 0x6E, 0x6B, 0x2F, 0x77, 0x61, 0x76, 0x65, 0x0,  0x54, 0x68, 0x61,
              0x6E, 0x6B, 0x20, 0x79, 0x6F, 0x75, 0x21, 0x20, 0x2F, 0x68, 0x65, 0x61, 0x72, 0x74, 0x0,  0x2F, 0x66, 0x69,
              0x72, 0x65, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x20, 0x46, 0x69, 0x72, 0x65, 0x21,
              0x20, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x2F, 0x66, 0x69, 0x72, 0x65, 0x0,  0x2F,
              0x73, 0x61, 0x64, 0x2F, 0x63, 0x72, 0x79, 0x20, 0x53, 0x6F, 0x72, 0x72, 0x79, 0x21, 0x20, 0x2F, 0x63, 0x72,
              0x79, 0x2F, 0x73, 0x61, 0x64, 0x0,  0x2F, 0x2D, 0x74, 0x61, 0x64, 0x61, 0x20, 0x43, 0x6F, 0x6E, 0x67, 0x72,
              0x61, 0x74, 0x75, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x21, 0x21, 0x21, 0x20, 0x2F, 0x74, 0x61, 0x64,
              0x61, 0x0,  0x2F, 0x63, 0x6C, 0x61, 0x70, 0x20, 0x47, 0x6F, 0x6F, 0x64, 0x20, 0x47, 0x61, 0x6D, 0x65, 0x21,
              0x20, 0x2F, 0x2D, 0x63, 0x6C, 0x61, 0x70, 0x0,  0x42, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62,
              0x61, 0x63, 0x6B, 0x21, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x66,
              0x6F, 0x72, 0x20, 0x6D, 0x65, 0x21, 0x20, 0x2F, 0x77, 0x69, 0x6E, 0x6B, 0x0,  0x53, 0x65, 0x65, 0x20, 0x79,
              0x6F, 0x75, 0x21, 0x20, 0x2F, 0x73, 0x6D, 0x69, 0x6C, 0x65, 0x2F, 0x77, 0x61, 0x76, 0x65, 0x0,  0x64, 0x0,
              0x0,  0x0,  0x10, 0x0,  0x7,  0x18, 0x0,  0x1,  0x2,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x1F, 0x0,
              0x1,  0x2,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x23, 0x0,  0x1,  0x2,  0x0,  0x0,  0x0,  0x1,  0x0,
              0x0,  0x0,  0x29, 0x0,  0x1,  0x2,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x2A, 0x0,  0x1,  0x2,  0x0,
              0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x2B, 0x0,  0x1,  0x2,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x2E,
              0x0,  0x1,  0x2,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x6D, 0xC9, 0xD7, 0x15, 0x39, 0x89, 0x90,
              0x85, 0xC,  0x11, 0xA,  0x0,  0x0,  0x1,  0x1,  0x0,  0x4,  0x0,  0x8,  0x0,  0x8,  0x0,  0x8,  0x0,  0x0,
              0x0,  0x96, 0xA3, 0x79, 0x5,  0x21, 0x4E, 0x0,  0x0,  0x69, 0x64, 0x6F, 0x6E, 0x74, 0x75, 0x6E, 0x64, 0x65,
              0x72, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x0,  0x2,  0x3,  0x3,  0x3,  0x4,  0x4,  0x5,  0x3,  0x4,  0x0,  0x0,
              0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x12, 0x0,  0x0,  0x0,
              0x0,  0x0,  0x0,  0x0,  0x15, 0x1,  0x2,  0x2,  0x0,  0xD0, 0x7,  0x3C, 0x0,  0x1C, 0x2,  0x0,  0x0,  0xE8,
              0x3,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xE8, 0x3,  0x1E, 0x0,  0xA,  0x0,  0xA,  0x0,  0xA,  0x0,  0x0,
              0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xE4, 0x67, 0xA1, 0xB8, 0x2,  0x0,  0x7D, 0x2E, 0x3,  0x0,  0x0,  0x0,
              0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0xFE, 0x1,  0x0,
              0x0,  0x21, 0x4,  0x0,  0x0,  0xF8, 0x5,  0x0,  0x0,  0xA4, 0xCF, 0x0,  0x0,  0xE4, 0x67, 0xA1, 0xB8, 0x0,
              0x0,  0x0,  0x0,  0xA,  0x6,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0xF,  0x0,  0x0,  0x0,  0x4,  0x0,
              0x0,  0x0,  0x1B, 0x0,  0x0,  0x0,  0x2,  0x0,  0x0,  0x0,  0x1E, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
              0x1F, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x25, 0x0,  0x0,  0x0,  0x30, 0x75, 0x0,  0x0,  0x35, 0x0,
              0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0x42, 0x0,  0x0,  0x0,  0x2,  0x0,  0x0,  0x0,  0x43, 0x0,  0x0,  0x0,
              0x4,  0x0,  0x0,  0x0,  0x45, 0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x6,  0xE,  0x0,  0x0,  0x0,  0x0,
              0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x4,  0x2B, 0x0,  0x0,  0x0,  0x4,  0x0,  0x0,  0x0,  0xDB,
              0x87, 0x1B, 0xCA, 0x0,  0x0,  0x0,  0x0,  0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
              0x0,  0x4,  0x96, 0xA3, 0x79, 0x5,  0x12, 0x0,  0x0,  0x0,  0xE4, 0x67, 0x6E, 0x1,  0x3A, 0x0,  0x0,  0x0,
              0x8E, 0x3,  0x0,  0x0,  0xC6, 0x1,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
              0x0,  0x0,  0x0};
          send_command(_socket, response);
        }
        break;

      // AcCmdCLShowInventory
      case 0x7E:
        {
          // AcCmdCLShowInventoryOK
          // verified
          DummyCommand response(0x7F);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              0x0};
          send_command(_socket, response);
        }
        break;

      // AcCmdCLRequestLicenseInfo
      case 0x52A:
        {
          // AcCmdCLRequestLicenseInfoOK
          DummyCommand response(0x52b);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              0x0};
          send_command(_socket, response);
        }
        break;

      // AcCmdCLRequestLeagueInfo
      case 0x31F:
        {
          // AcCmdCLRequestLeagueInfoOK
          DummyCommand response(0x320);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              0x0};
          send_command(_socket, response);
        }
        break;

      // AcCmdCLAchievementCompleteList
      case 0xe6:
        {
          // AcCmdCLAchievementCompleteListOK
          DummyCommand response(0xe7);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
            0xE8, 0xE2, 0x06, 0x00, // character id probably
            0x1C, 0x00, 0x28, 0x4E,  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x29, 0x4E, 0x00, 0x00, 0x00,  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x2A, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x4E, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x2C, 0x4E, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAB,  0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xAC, 0x27, 0x00, 0x00,  0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xAD, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01,  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x27,
            0x00, 0x00, 0x00, 0x00, 0x01, 0xF4, 0x01, 0x00,  0x00, 0x00, 0x00, 0xAF, 0x27, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  0xB0, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x27, 0x00,  0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,
            0x00, 0x00, 0xB2, 0x27, 0x00, 0x00, 0x00, 0x00,  0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB3,
            0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,  0x00, 0x00, 0x00, 0x00, 0xB4, 0x27, 0x00, 0x00,
            0x00, 0x00, 0x01, 0xF4, 0x01, 0x00, 0x00, 0x00,  0x00, 0xB5, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0x27,  0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
            0x00, 0xFF, 0x00, 0xB7, 0x27, 0x00, 0x00, 0x00,  0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xB8, 0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,  0x00, 0x00, 0x00, 0x00, 0x00, 0xB9, 0x27, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,  0x00, 0x00, 0xBA, 0x27, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB,  0x27, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xBC, 0x27, 0x00, 0x00,  0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xBD, 0x27, 0x00, 0x00, 0x00, 0x00, 0xFF,  0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xBE, 0x27,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,  0x00, 0x00, 0x00, 0xBF, 0x27, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  0xC0, 0x27, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
            0x00, 0x00, 0x00, 0xFF, 0x00, 0xC1, 0x27, 0x00,  0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00,
          };
          send_command(_socket, response);
        }
        break;

      // AcCmdCLShowMountList
      case 0x43D:
        {
          // AcCmdCLShowMountListOK
          DummyCommand response(0x43e);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              0x0};
          send_command(_socket, response);
        }
        break;

      // AcCmdCLShowEggList
      case 0x431:
        {
          // AcCmdCLShowEggListOK
          DummyCommand response(0x432);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              0x0};
          send_command(_socket, response);
        }
        break;

      // AcCmdCLShowCharList
      case 0x4C8:
        {
          // AcCmdCLShowCharListOK
          DummyCommand response(0x4c9);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              0x0};
          send_command(_socket, response);
        }
        break;

      // AcCmdCLRequestMountEquipmentList
      case 0x47A:
        {
          // AcCmdCLRequestMountEquipmentListOK
          DummyCommand response(0x47B);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
            0xE8, 0xE2, 0x06, 0x00, // character ID?
            0x00, // length
          };
          send_command(_socket, response);
        }
        break;

      // AcCmdCLEnterChannel
      case 0x2B:
        {
          // AcCmdCLEnterChannelOK
          DummyCommand response(0x2c);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              0x00, // member0
              0x00, 0x00 // member1
          };
          send_command(_socket, response);
        }
        break;

      // AcCmdCLMakeRoom
      case 0x13:
        {
          // AcCmdCLMakeRoomOK
          DummyCommand response(0x14);
          response.timestamp = std::chrono::system_clock::now();
          response.data = {
              // one of these two probably has to be the char id
              0xE8, 0xE2, 0x06, 0x00,
              0xE8, 0xE2, 0x06, 0x00,
              0x00, 0x00, // port
              0x00, // member2
          };
          send_command(_socket, response);
        }
        break;
    }
    
    read_loop();
  });
}

void alicia::Server::host()
{
  asio::ip::tcp::endpoint server_endpoint(asio::ip::tcp::v4(), 10030);
  printf("Hosting the server on port 10030\n");
  _acceptor.open(server_endpoint.protocol());
  _acceptor.bind(server_endpoint);
  _acceptor.listen();
  accept_loop();
}

void alicia::Server::accept_loop()
{
  _acceptor.async_accept([&](boost::system::error_code error, asio::ip::tcp::socket client_socket) {
    printf("Accepted new client from port %d\n", client_socket.remote_endpoint().port());
    const auto [itr, _] = _clients.emplace(client_id++, std::move(client_socket));
    itr->second.read_loop();

    accept_loop();
  });
}